name: Terraform deploy kubernetes cluster

on:
  push:
    paths:
      - 'terraform_gcp/**'
      - '.github/workflows/TerraformGCP.yml'
    branches:
      - main
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BUCKET_NAME: mondybucketgcp
  SA_NAME: git-490@tidy-vent-384809.iam.gserviceaccount.com 
  CLUSTER_NAME: mondyspout-clusterk8s
  REGION: us-central1

jobs:
  terraform-CI:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform_gcp

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Decode credentials
        run: echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > credentials_file.json

      - name: Authenticate with Google Cloud
        run: |
          gcloud config set account ${SA_NAME}
          gcloud auth activate-service-account --key-file=credentials_file.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      - name: Create bucket if dosn't exists
        env:
          SCRIPT_DIR: ${{ github.workspace }}/terraform_gcp/scripts
        run: bash  $SCRIPT_DIR/create-bucket.sh
          
      - name: terraform init
        run: terraform init

      - name: terraform plan
        id: plan
        run: terraform plan -lock=false -var="project_id=${{ secrets.GCP_PROJECT_ID }}" 
      
      - name: terraform apply 
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: terraform apply -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}"

      - name: Terraform Destroy
        if: contains(github.event.head_commit.message, 'destroy')
        run: terraform destroy -auto-approve -var="project_id=${{ secrets.GCP_PROJECT_ID }}" -auto-approve

  terraform-CD:
    needs: 
      - terraform-CI
    if: "!contains(github.event.head_commit.message, 'destroy') "
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform_gcp

    steps:
    - name: Clon Rep
      uses: actions/checkout@v3

    - name: Decode credentials
      run: echo "${{ secrets.GCP_CREDENTIALS }}" | base64 -d > credentials_file.json

    - name: Authenticate with Google Cloud
      run: |
        gcloud config set account ${SA_NAME}
        gcloud auth activate-service-account --key-file=credentials_file.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

    - name: Install Auth Plugin for cluster
      env:
        SCRIPT_DIR: ${{ github.workspace }}/terraform_gcp/scripts
      run: bash  $SCRIPT_DIR/gcloud-auth-plugin.sh

    - name: Get kubeconfig 
      run: gcloud container clusters get-credentials $CLUSTER_NAME --region=$REGION --project=${{ secrets.GCP_PROJECT_ID }}

    - name: Check Services/Pods/Deployment Before Deploy
      run: echo "This is Services" && kubectl get service && echo "This is PODS" &&kubectl get pods  && echo "This is Deployments" && kubectl get  deployment

    - name: Apply Kubernetes manifest
      run: kubectl apply -f mysql.yml

    - name: Wait for 80 seconds()
      run: sleep 80s

    - name: Check Mysql Pods
      run: kubectl exec -i $(kubectl get pod -l "app=mysql" -o jsonpath='{.items[0].metadata.name}') -- mysql -u root -p1234 -e "SHOW DATABASES;"

    - name: Create DB/Tables
      env:
        SCRIPT_DIR: ${{ github.workspace }}/terraform_gcp/scripts
      run: bash  $SCRIPT_DIR/mysql.sh

    - name: Wait for 20 seconds()
      run: sleep 20s

    - name: Delete Mysql
      run: kubectl delete service mysql && kubectl delete pods --selector app=mysql && kubectl delete deployment mysql

    - name: Wait for 10 seconds()
      run: sleep 10s

    - name: Check Services/Pods/Deployments after Delete
      run: echo "This is Services" && kubectl get service && echo "This is PODS" &&kubectl get pods  && echo "This is Deployments" && kubectl get  deployment

    - name: Apply Kubernetes manifest after Delete
      run: kubectl apply -f mysql.yml

    - name: Wait for 80 seconds()
      run: sleep 80s

    - name: Check Services/Pods/Deployments after repeated Deploy
      run: echo "This is Services" && kubectl get service && echo "This is PODS" &&kubectl get pods  && echo "This is Deployments" && kubectl get  deployment

    - name: Check Mysql Pods after repeated Deploy
      run: kubectl exec -i $(kubectl get pod -l "app=mysql" -o jsonpath='{.items[0].metadata.name}') -- mysql -u root -p1234 -e "SHOW DATABASES;"
